mporterer nødvendige moduler
import numpy as np #Numpy er en pakke som kan gjøre matematiske beregninger på store datasett, veldig effektivt 
import pandas as pd # dataanalyseverktøy og brukervennlige datastrukturer, datamodellering, veldig sentralt innenfor økonomi 
import matplotlib.pyplot as plt #Generelt sett det vanligste verktøyet i python for å lage plotts, samtidig få en oversiktlig 
                                # og fin datafremvisning som kan gjøre det enklere å forstå dataen. 

def getDefaultInputs(): # starten på en funksjon. Det gir navnet på funksjonen, samt eventuelle (argument)parametere (i parentesen) 
    defaultLoan = 0     # setter inn forhåndsvalgte standard verdier, dette for å båd
    defaultTerms = 1    #
    defaultCapital = 0
    defaultKids = 0
    defaultCar = 0                       # 0 nei eller  1 ja
    defaultInterest = 1                      # i %

    return defaultLoan, defaultTerms, defaultCapital, defaultKids, defaultCar, defaultInterest


def calculateInterest(interest, kids, car): # Parametere fungerer som en lokal variabel i funksjonskoden, 
    if kids >= 1 and car == True:           # Argument kan være en verdi, variabel eller uttrykk som blir en verdi, dette overføres til funksjonen
        interest *= 1.05                    # Argumentverdien overføres til funksjonen, det vil si at den puttes inn
                                            # for parametervariabelen når funksjonen utføres
    if kids > 0 or car == True:
        interest *= 1.03

    return 1 + interest/100     # om renta er 10% så blir 'interest' = 1.1
    

def kalkulator():
    termArray=np.array([])                  #år eller måned.         # np.array 
    amountInterestArray = np.array([])      # renter i kroner        # 
    amountDeductionArray = np.array([])     # avdrag i kroner        #
    amountTermArray = np.array([])          # terminbeløp i kroner.  #
### ARRAYYYYYYYYYYY UNDER HER 
    ### Vi kan regne ledd for ledd direkte med hele arrayer.
    ### Hvis vi lagrer tallene i en liste, må vi la en løkke løpe gjennom lista for å gjøre regneoperasjoner på tallene. Når vi lagrer tallene i en numpy-array, kan vi regne på alle tall samtidig, som om de var et enkelt tall.
    ### En array likner på en liste av tall.
    ### En Array kan holde mer enn en verdi av gangen, og referer til et index nummer for å finne riktig. 
    ### en type datastruktur

    # Tar inn brukerinput og leser inn i variabler
    loan, terms, capital, kids, car, interest = hent_input()

    # Bestemmer interesse basert på om brukeren har barn og/eller bil
    interest = calculateInterest(interest, kids, car)

    # Regner ut verdiene for lånet
    total = int(round((loan - capital) * (interest ** terms)))
    denominator = 0                 # nevneren i brøken på side 376
    for i in range(terms):            
        denominator = denominator + interest ** i
    termAmount = int(round(total / denominator))

    # Legger til termin-år, terminbeløp, avdrag, og rente for alle terminene i sine respektive lister
    # Append legger til et element i listen. 
    for i in range(terms):     ### Returnerer en rekke av nummer, starter fra 0 som standard og øker med en, stopper før et spesifisert nummer. 
        termArray = np.append(termArray, i + 1)
        amountTermArray = np.append(amountTermArray, termAmount)
        amountDeductionArray = np.append(amountDeductionArray, int(round(termAmount/(interest ** (i + 1)))))
        amountInterestArray = np.append(amountInterestArray, int(round(termAmount - termAmount/(interest ** (i + 1)))))

    # Printer ut totalbeløp og terminbeløp, samt listene over dataene i lånet
    print_beregninger(interest, total, termAmount, termArray, amountTermArray, amountDeductionArray, amountInterestArray)

    # Plotter lånet
    plott_laan(termArray, amountDeductionArray, amountInterestArray,termAmount)


def hent_input():
    print("Press 'enter' for å velge de forvalgte verdiene som står skrevet imellom parantesene, eller skriv inn egne verdier.")

    defaultLoan, defaultTerms, defaultCapital, defaultKids, defaultCar, defaultInterest = getDefaultInputs()

    loan=int(input("Ønsket lånebeløp (" + str(defaultLoan) + "): ") or str(defaultLoan))
    terms=int(input("Hvor mange år skal lånet nedbetales på? (" + str(defaultTerms) + "): ") or str(defaultTerms))
    capital=int(input("Hvor mye har du i egenkapital? (" + str(defaultCapital) + ") ") or str(defaultCapital))
    kids=int(input("Hvor mange barn har du? (" + str(defaultKids) + "): ") or str(defaultKids))
    car=(input("Har du bil? Skriv 0 hvis ikke, eller 1 hvis du har. (" + str(defaultCar) + "): ") or str(defaultCar))
    interest=float(input("Rente i prosent (" + str(defaultInterest) + "): ") or str(defaultInterest))

    return loan, terms, capital, kids, car, interest

### /n for å lage mellomrom mellom Hent_input og Print_beregninger, på resultatet under. 
def print_beregninger(interest, total, termAmount, termArray, amountTermArray, amountDeductionArray, amountInterestArray):
    print("\nMed renten " + str(interest) + " blir totalen: " + str(total))
    print("Terminbeløp: " + str(termAmount))
    print("År: " + str(termArray))
    print("Terminbeløp: " + str(amountTermArray))
    print("Avdrag: " + str(amountDeductionArray[::-1]))
    print("Renter og gebyrer: " + str(amountInterestArray[::-1]))


def plott_laan(termArray, amountDeductionArray, amountInterestArray, termAmount):
    plt.bar(termArray, amountDeductionArray[::-1], color='darkblue')
    plt.bar(termArray, amountInterestArray[::-1], bottom=amountDeductionArray[::-1], color='royalblue')
    plt.xlabel('ÅR')
    plt.ylabel('TERMINBELØP')
    plt.legend(['Avdrag', 'Renter'], loc='lower right')
    plt.title('Annuitetslån')
    plt.rcParams["figure.figsize"] = [12, 8]
    plt.xticks(termArray)

    
    for n in termArray:   # 
         
        deductionPercent = (amountDeductionArray[len(termArray) -int(n)] / (amountDeductionArray[len(termArray) -int(n)] + amountInterestArray[len(termArray) -int(n)])) * 100

        
            # Skrive prosentandel for avdrag
        plt.text(x=n-0.25,
            y=termAmount * (deductionPercent/100) / 2,
            s=f'{np.round(deductionPercent, 1)}%',
            color="white",
            fontsize=8)

            # Skrive prosentandel for renter
        plt.text(x=n-0.25,
            y=termAmount * (deductionPercent/100) + termAmount * ((100 - deductionPercent)/100) / 2,
            s=f'{np.round(100 - deductionPercent, 1)}%',
            color="black",
            fontsize=8)

    plt.show()
kalkulator()
###################################

def eksempel(array):
    termArray = np.array([])  
    amountInterestArray = np.array([])  
    amountDeductionArray = np.array([])  
    amountTermArray = np.array([])  
    
    loan, terms, capital, kids, car, interest = array    #Bytter hent input me array, for å skrive eksempler lettere

    interest = calculateInterest(interest, kids, car)

    total = int(round((loan - capital) * (interest ** terms)))
    denominator = 0  # nevneren i brøken på side 376
    for i in range(terms):
        denominator = denominator + interest ** i   
    termAmount = int(round(total / denominator))

    for i in range(terms): 
        termArray = np.append(termArray, i + 1)
        amountTermArray = np.append(amountTermArray, termAmount)
        amountDeductionArray = np.append(amountDeductionArray, int(round(termAmount / (interest ** (i + 1)))))
        amountInterestArray = np.append(amountInterestArray,
                                        int(round(termAmount - termAmount / (interest ** (i + 1)))))

    print_beregninger(interest, total, termAmount, termArray, amountTermArray, amountDeductionArray,
                      amountInterestArray)

    plott_laan(termArray, amountDeductionArray, amountInterestArray, termAmount)

    calculateInterest(interest, kids, car)

moneyArray = [2000000, 15, 300000, 0, 0, 2.6]

eksempel(moneyArray)
